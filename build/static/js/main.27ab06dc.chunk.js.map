{"version":3,"sources":["components/Form/form.module.scss","components/List/list.module.scss","components/ListItem/listItem.module.scss","components/Filter/filter.module.scss","components/Form/Form.js","components/ListItem/ListItem.js","components/List/List.js","components/Filter/Filter.js","App/App.js","index.js"],"names":["module","exports","Form","saveForm","useState","name","setName","number","setNumber","handleChange","e","target","value","className","s","form","label","type","pattern","title","required","autoComplete","onChange","input","btn","onClick","preventDefault","ListItem","contact","backgroundColorItem","deleteContact","statusCheckbox","id","classNameBtn","style","item","contactSpan","List","filtredContacts","editCheckbox","setEditCheckbox","useEffect","length","classNameCheckbox","indexOf","backgroundColor","contactsList","hidden","checked","list","map","changeCheckbox","Filter","filter","App","JSON","parse","localStorage","getItem","contacts","setContacts","setFilter","setItem","stringify","saveContact","uuid","toLowerCase","includes","find","alert","test","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27ab06dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__oKlKm\",\"label\":\"form_label__14Gtg\",\"input\":\"form_input__1ucsV\",\"btn\":\"form_btn__20OJ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"list_contactsList__3BTPw\",\"list\":\"list_list__2XsKn\",\"hidden\":\"list_hidden__1L9AM\",\"checkboxEdit\":\"list_checkboxEdit__34l5i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"listItem_item__2JuYC\",\"btn_delete\":\"listItem_btn_delete__2Xwpv\",\"contactSpan\":\"listItem_contactSpan__2GjW_\",\"hidden-visually\":\"listItem_hidden-visually__2xXfq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"filter_input__2WOpW\"};","import React, { useState } from \"react\"\nimport s from './form.module.scss'\nimport PropTypes from 'prop-types'\n\nexport default function Form({ saveForm }) {\n    \n    const [name, setName] = useState('')\n    const [number, setNumber] = useState ('')\n    \n    const handleChange = (e) => {\n        const { name, value } = e.target\n        if (name === 'name') {\n            setName(value)\n        }\n        if (name === 'number') {\n            setNumber(value)\n        }\n    }\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()\n        saveForm(name, number)\n        setName('')\n        setNumber('')\n    }\n\n    return (\n        <form className={s.form}>\n\n            <label className={s.label}> Name\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                  required\n                  autoComplete=\"off\"\n                  onChange = {handleChange}\n                  value={name}\n                  className={s.input}\n                />\n            </label>\n            <br/>\n            <label className={s.label}> Number\n                <input\n                  type=\"tel\"\n                  name=\"number\"\n                  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                  required\n                  autoComplete=\"off\"\n                  onChange = {handleChange}\n                  value={number}\n                  className={s.input}\n                />\n            </label>\n            <br/>\n            <button\n                type=\"submit\"\n                className={s.btn}\n                onClick = {handleSubmit}>\n                Add contact\n            </button>\n            \n        </form>\n    )\n}\n\nForm.propTypes = {\n    saveForm: PropTypes.func\n}","import React from \"react\";\nimport s from './listItem.module.scss'\nimport PropTypes from 'prop-types'\n\nexport default function ListItem({\n    contact,\n    backgroundColorItem,\n    deleteContact,\n    statusCheckbox }) {\n\n    const { name, number, id } = contact\n\n    let classNameBtn = 'btn_delete'\n    if (!statusCheckbox) {\n        classNameBtn += ' hidden'\n    }\n\n    return (\n        <li\n            style={backgroundColorItem}\n            className={s.item}>\n            <div className={s.contactSpan}>\n                <span>{name} </span>\n                <span>{number} </span>\n            </div>\n            <button\n                type=\"button\"\n                className={classNameBtn}\n                onClick={() => deleteContact(id)}>\n                Delete\n            </button>\n        </li>\n        )\n}\n\nListItem.propTypes = {\n    backgroundColorItem: PropTypes.object,\n    deleteContact: PropTypes.func,\n    statusCheckbox: PropTypes.bool,\n    contact: PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n    })\n    }","import React, {useEffect, useState} from \"react\"\nimport ListItem from \"../ListItem/ListItem\"\nimport s from './list.module.scss'\nimport PropTypes from 'prop-types'\n\nexport default function List({filtredContacts, deleteContact}) {\n    const [editCheckbox, setEditCheckbox] = useState(false)\n    \n    useEffect(() => {\n        if (filtredContacts.length === 0) {\n        setEditCheckbox(false)\n    }}, [filtredContacts.length]\n    )\n\n    let classNameCheckbox = 'checkboxEdit'\n    if (editCheckbox) {\n    classNameCheckbox += ' checkboxEditActive'\n    }\n\n    const backgroundColorItem = contact =>\n        filtredContacts.indexOf(contact) % 2 === 0\n            ? { backgroundColor: 'transparent' }\n            : { backgroundColor: 'white' }\n\n    return (\n        <div className={s.contactsList}>\n            {filtredContacts.length > 0\n                && (<label className={classNameCheckbox}>\n                        Edit\n                        <input\n                            type=\"checkbox\"\n                            className={s.hidden}\n                            checked={editCheckbox}\n                            onChange={() => setEditCheckbox(!editCheckbox)}\n                        />\n                    </label>)\n            }    \n            <ul className={s.list}>\n                {filtredContacts.map(contact =>\n                    <ListItem\n                        key={contact.id}\n                        contact={contact}\n                        backgroundColorItem={backgroundColorItem(contact)}\n                        filtredContacts={filtredContacts}\n                        changeCheckbox={setEditCheckbox}\n                        statusCheckbox={editCheckbox}\n                        deleteContact={deleteContact}\n                    />\n                    )}\n            </ul>\n        </div>\n    )\n}\n\nList.propTypes = {\n    deleteContact: PropTypes.func,\n    filtredContacts: PropTypes.array\n    }","import React from \"react\";\nimport s from './filter.module.scss'\nimport PropTypes from 'prop-types'\n\nexport default function Filter ({handleChange, filter=''}) {\n\n    return (\n        <label className={s.label}>\n            Find contacts by name \n        <input\n            type=\"text\"\n            name=\"filter\"\n            className={s.input}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            autoComplete=\"off\"\n            onChange = {handleChange}\n            value = {filter}>\n        </input>\n        </label>\n    )\n}\n\nFilter.propTypes = {\n    handleChange: PropTypes.func,\n    filter: PropTypes.string,\n}","// import logo from './logo.svg';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from '../components/Form'\nimport List from '../components/List'\nimport { v4 as uuid } from 'uuid';\nimport Filter from '../components/Filter';\n\nfunction App() {\n\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(localStorage.getItem('contacts')) ?? {}\n  })\n  const [filter, setFilter] = useState('')\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts))\n   }, [contacts])\n\n  const handleFilterChange = (e) => {\n    setFilter( e.target.value )\n  }\n\n const onSubmit = (name, number) => {\n    \n    const regNumber = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\n    const regName = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/\n\n    if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      alert(`${name} is already in contacts`)\n    } else {\n      if (name === '' || number === '') {\n        alert(\"Do not save contact without a name or number\")\n      } else {\n        if (!regName.test(name)) {\n          alert(\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\")\n        } else {\n          if (!regNumber.test(number)) {\n            alert(\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\")\n          } else {\n            saveContact({ name, number })\n          }\n        }\n      }\n    }\n  }\n\n  const saveContact = ({name, number}) => {\n    const contact = { id: uuid(), name, number }\n    setContacts(( contacts ) => [contact, ...contacts])\n    setFilter('')\n  };\n\n  const deleteContact = id => {\n    setContacts(\n      contacts.filter(contact => contact.id !== id)\n    )\n  }\n  \n  const filtredContacts =\n    contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n\n  return (\n    <div className=\"app\">\n      <h1>Phonebook</h1>\n\n      <Form\n        saveForm={onSubmit}\n      />\n      \n      {contacts.length > 0 \n        ? (<>\n          <h2>Contacts</h2>\n          <Filter\n              handleChange={handleFilterChange}\n              filter={filter} />\n          </>)\n        : (<p>no contacts at the moment</p>)\n      }\n\n      <List\n        filtredContacts={filtredContacts}\n        deleteContact={deleteContact}\n      />\n      \n    </div>\n  )\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}